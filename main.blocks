<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="1%+a/`S|fcmMD|{B2TeH" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="%[x0KX!/]d:;E02{ja|+" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace elizatools {" line1="" line2="    //% block=&quot;Set Tiny LED to Color $c&quot;" line3="    //% group=&quot;TinyLED&quot;" line4="    export function tinyLedColor( c:Color ) {" line5="        let b = pins.createBuffer(3)" line6="        b[ 1 ] = c.red;" line7="        b[ 0 ] = c.green;" line8="        b[ 2 ] = c.blue;" line9="        ws2812b.sendBuffer(b, DigitalPin.P16);" line10="    }" line11="" line12="    //% block=&quot;Set Tiny LED $cv&quot;" line13="    //% group=&quot;TinyLED&quot;" line14="    //% cv.shadow=&quot;colorNumberPicker&quot;" line15="    export function tinyLedDirect(cv:number) {" line16="        let c = pins.createBuffer(3)" line17="        c[1] = (cv &gt;&gt; 16) &amp; 0xFF;" line18="        c[0] = (cv &gt;&gt; 8) &amp; 0xFF;" line19="        c[2] = (cv &gt;&gt; 0) &amp; 0xFF;" line20="        ws2812b.sendBuffer(c, DigitalPin.P16);" line21="    }" line22="" line23="    //% block=&quot;Set Ring LED to Color $c&quot;" line24="    //% group=&quot;TinyLED&quot;" line25="    export function ringColor(c: Color) {" line26="        let d = pins.createBuffer(24*4)" line27="" line28="        for ( let i = 0; i &lt; 24; i++ ) {" line29="            d[i * 4 + 1] = c.red;" line30="            d[i * 4 + 0] = c.green;" line31="            d[i * 4 + 2] = c.blue;" line32="            d[i * 4 + 3] = 0;" line33="        }" line34="        ws2812b.sendBuffer(d, DigitalPin.P8);" line35="    }" line36="" line37="    //% block=&quot;Set Ring LED $cv&quot;" line38="    //% group=&quot;TinyLED&quot;" line39="    //% cv.shadow=&quot;colorNumberPicker&quot;" line40="    export function ringDirect(cv: number) {" line41="        let e = pins.createBuffer(24*4)" line42="" line43="        for (let j = 0; j &lt; 24; j++) {" line44="            e[j * 4 + 1] = (cv &gt;&gt; 16) &amp; 0xFF;" line45="            e[j * 4 + 0] = (cv &gt;&gt; 8) &amp; 0xFF;" line46="            e[j * 4 + 2] = (cv &gt;&gt; 0) &amp; 0xFF;" line47="            e[j * 4 + 3] = 0x00;" line48="        }" line49="        ws2812b.setBufferMode(DigitalPin.P8, ws2812b.BUFFER_MODE_RGBW );" line50="        ws2812b.sendBuffer(e, DigitalPin.P8 );" line51="" line52="        // let b = pins.createBuffer(4)" line53="        // b[1] = (cv &gt;&gt; 16) &amp; 0xFF;" line54="        // b[0] = (cv &gt;&gt; 8) &amp; 0xFF;" line55="        // b[2] = (cv &gt;&gt; 0) &amp; 0xFF;" line56="        // b[3] =  0xFF;" line57="        // ws2812b.setBufferMode(DigitalPin.P8, ws2812b.BUFFER_MODE_RGBW );" line58="        // ws2812b.sendBuffer(b, DigitalPin.P8);" line59="" line60="    }" line61="" line62="" line63="" line64="    //% block=&quot;create color&quot;" line65="    //% group=&quot;Color&quot;" line66="    export function createColor(): Color {" line67="        return new Color( 0, 0, 0);" line68="    }" line69="" line70="    //% block=&quot;create specified color $cv&quot;" line71="    //% cv.shadow=&quot;colorNumberPicker&quot;" line72="    //% group=&quot;Color&quot;" line73="    export function createSpecifiedColor( cv:number ): Color {" line74="        let f = new Color( 0, 0, 0 );" line75="        f.selectColor( cv );" line76="        return f;" line77="    }" line78="" line79="    // //% block=&quot;select color $v for $color&quot;" line80="    // //% v.shadow=&quot;colorNumberPicker&quot;" line81="    // export function selectColor( c:Color, v:number) {" line82="    //     c.selectColor( v );" line83="    // }" line84="" line85="    //% block" line86="    //% group=&quot;Charger&quot;" line87="    export function checkCharger(): boolean {" line88="        let id = i2cReadRegister8( 0x6B, 0x48 )" line89="        // basic.showNumber( id )" line90="        return ( id == 0x19 )" line91="    }" line92="" line93="    //% block" line94="    //% group=&quot;IMU&quot;" line95="    export function checkIMU(): boolean {" line96="        let id2 = i2cReadRegister8( 0x68, 0x75 )" line97="        return (id2 == 0x4E)" line98="    }" line99="" line100="" line101="    //% block" line102="    //% group=&quot;ColorSensor&quot;" line103="    export function checkColorSensor(): boolean {" line104="        let id3 = i2cReadRegister8( 41, 178 )" line105="        // basic.showNumber( id )" line106="        return ( id3 == 68 )" line107="    }" line108="" line109="    let colorSensorConfigured : boolean = false;" line110="" line111="    //% block" line112="    //% group=&quot;ColorSensor&quot;" line113="    export function colorSensorRead( ) : Color {" line114="        let g = new Color();" line115="        colorSensorConfigure();" line116="        if (colorSensorConfigured) {" line117="            g.red = i2cReadRegister16(41, 184) &gt;&gt; 8;" line118="            g.green = i2cReadRegister16(41, 186) &gt;&gt; 8;" line119="            g.blue = i2cReadRegister16(41, 188) &gt;&gt; 8;" line120="        }" line121="        return g;" line122="    }" line123="" line124="    function colorSensorConfigure() {" line125="        if ( !colorSensorConfigured &amp;&amp; checkColorSensor() ) {" line126="            // turn it on" line127="            i2cWriteRegister(41, (0 + 0x80), 3)" line128="            basic.pause(100)" line129="            //" line130="            i2cWriteRegister(41, (1 + 0x80), 255)" line131="            i2cWriteRegister(41, (3 + 0x80), 255)" line132="            i2cWriteRegister(41, (13 + 0x80), 0)" line133="            basic.showString( &quot;C&quot;);" line134="            colorSensorConfigured = true;" line135="        }" line136="    }" line137="" line138="    //% block=&quot;i2c read8 @ $address reg $register&quot;" line139="    //% group=&quot;I2C&quot;" line140="    export function i2cReadRegister8(address: number, register: number): number {" line141="        pins.i2cWriteNumber(" line142="            address," line143="            register," line144="            NumberFormat.UInt8LE," line145="            true" line146="        )" line147="        return pins.i2cReadNumber(address, NumberFormat.UInt8LE, false)" line148="    }" line149="" line150="    //% block=&quot;i2c read16 @ $address reg $register&quot;" line151="    //% group=&quot;I2C&quot;" line152="    export function i2cReadRegister16(address: number, register: number): number {" line153="        pins.i2cWriteNumber(" line154="            address," line155="            register," line156="            NumberFormat.UInt8LE," line157="            true" line158="        )" line159="        return pins.i2cReadNumber(address, NumberFormat.UInt16LE, false)" line160="    }" line161="" line162="    //% block=&quot;i2c write8 @$address reg $register v $value&quot;" line163="    //% group=&quot;I2C&quot;" line164="    export function i2cWriteRegister(address: number, register: number, value: number) {" line165="        pins.i2cWriteNumber(" line166="            address," line167="            register," line168="            NumberFormat.UInt8LE," line169="            true" line170="        )" line171="        pins.i2cWriteNumber(address, value, NumberFormat.UInt8LE, false)" line172="    }" line173="" line174="" line175="    //% block" line176="    //% group=&quot;Misc&quot;" line177="    export function showA0() {" line178="        basic.showNumber(pins.analogReadPin(AnalogPin.P0))" line179="    }" line180="" line181="}" numlines="182"></mutation><next><block type="typescript_statement" id="Bz-/c)Ej:X?0){QUi)9}" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class Color {" line1="" line2="    //% blockCombine" line3="    public red: number;" line4="    //% blockCombine" line5="    public green: number;" line6="    //% blockCombine" line7="    public blue: number;" line8="" line9="    constructor( red:number = 0, green:number = 0, blue:number = 0 ) {" line10="        this.red = 0;" line11="        this.green = 0;" line12="        this.blue = 0;" line13="    }" line14="" line15="" line16="    //% block=&quot;select color $c for $this&quot;" line17="    //% this.defl=color" line18="    //% c.shadow=&quot;colorNumberPicker&quot;" line19="    public selectColor( c:number ) {" line20="        this.blue = (c &gt;&gt; 0) &amp; 0xFF;" line21="        this.green = (c &gt;&gt; 8) &amp; 0xFF;" line22="        this.red = (c &gt;&gt; 16) &amp; 0xFF;" line23="    }" line24="" line25="    //% block=&quot;get color number from $this&quot;" line26="    //% this.defl=color" line27="    public getColorNumber() : number {" line28="        return ( this.red &lt;&lt; 16 ) | ( this.green &lt;&lt; 8 ) | ( this.blue );" line29="    }" line30="" line31="    //% block=&quot;show $this&quot;" line32="    //% this.defl=color" line33="    //% this.shadow=variables_get" line34="    public show() {" line35="        basic.showString(&quot;R&quot;)" line36="        basic.showNumber(this.red);" line37="        basic.showString(&quot;G&quot;)" line38="        basic.showNumber(this.green);" line39="        basic.showString(&quot;B&quot;)" line40="        basic.showNumber(this.blue);" line41="    }" line42="" line43="}" numlines="44"></mutation></block></next></block></statement></block></xml>