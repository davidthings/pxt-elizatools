<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="mc(S0xIFoEEY];R[;F!," x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="*8=Z|EOzG3mrM{r8*{mc" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace elizatools {" line1="" line2="    //% block=&quot;Set Tiny LED to $c&quot;" line3="    //% blockSetVariable=color" line4="    //% group=&quot;Tiny LED&quot;" line5="    export function tinyLed( c:Color ) {" line6="        let b = pins.createBuffer(3)" line7="        b[ 0 ] = c.red;" line8="        b[ 1 ] = c.green;" line9="        b[ 2 ] = c.blue;" line10="        ws2812b.sendBuffer(b, 8);" line11="    }" line12="" line13="    //% block=&quot;create color&quot;" line14="    //% blockSetVariable=color" line15="    //% group=&quot;Color&quot;" line16="    export function createColor(): Color {" line17="        return new Color();" line18="    }" line19="" line20="    // //% block=&quot;select color $v for $color&quot;" line21="    // //% v.shadow=&quot;colorNumberPicker&quot;" line22="    // export function selectColor( c:Color, v:number) {" line23="    //     c.selectColor( v );" line24="    // }" line25="" line26="    //% block" line27="    //% group=&quot;ColorSensor&quot;" line28="    export function checkColorSensor(): boolean {" line29="        let id = i2cReadRegister8( 41, 178 )" line30="        // basic.showNumber( id )" line31="        return ( id == 68 )" line32="    }" line33="" line34="    let colorSensorConfigured : boolean = false;" line35="" line36="    //% block" line37="    //% group=&quot;ColorSensor&quot;" line38="    export function colorSensorRead( ) : Color {" line39="        let c = new Color();" line40="        colorSensorConfigure();" line41="        if (colorSensorConfigured) {" line42="            c.red = i2cReadRegister16(41, 184) &gt;&gt; 8;" line43="            c.green = i2cReadRegister16(41, 186) &gt;&gt; 8;" line44="            c.blue = i2cReadRegister16(41, 188) &gt;&gt; 8;" line45="        }" line46="        return c;" line47="    }" line48="" line49="    function colorSensorConfigure() {" line50="        if ( !colorSensorConfigured &amp;&amp; checkColorSensor() ) {" line51="            // turn it on" line52="            i2cWriteRegister(41, (0 + 0x80), 3)" line53="            basic.pause(100)" line54="            //" line55="            i2cWriteRegister(41, (1 + 0x80), 255)" line56="            i2cWriteRegister(41, (3 + 0x80), 255)" line57="            i2cWriteRegister(41, (13 + 0x80), 0)" line58="            basic.showString( &quot;C&quot;);" line59="            colorSensorConfigured = true;" line60="        }" line61="    }" line62="" line63="    //% block=&quot;i2c read8 @ $address reg $register&quot;" line64="    //% group=&quot;I2C&quot;" line65="    export function i2cReadRegister8(address: number, register: number): number {" line66="        pins.i2cWriteNumber(" line67="            address," line68="            register," line69="            NumberFormat.UInt8LE," line70="            true" line71="        )" line72="        return pins.i2cReadNumber(address, NumberFormat.UInt8LE, false)" line73="    }" line74="" line75="    //% block=&quot;i2c read16 @ $address reg $register&quot;" line76="    //% group=&quot;I2C&quot;" line77="    export function i2cReadRegister16(address: number, register: number): number {" line78="        pins.i2cWriteNumber(" line79="            address," line80="            register," line81="            NumberFormat.UInt8LE," line82="            true" line83="        )" line84="        return pins.i2cReadNumber(address, NumberFormat.UInt16LE, false)" line85="    }" line86="" line87="    //% block=&quot;i2c write8 @$address reg $register v $value&quot;" line88="    //% group=&quot;I2C&quot;" line89="    export function i2cWriteRegister(address: number, register: number, value: number) {" line90="        pins.i2cWriteNumber(" line91="            address," line92="            register," line93="            NumberFormat.UInt8LE," line94="            true" line95="        )" line96="        pins.i2cWriteNumber(address, value, NumberFormat.UInt8LE, false)" line97="    }" line98="" line99="" line100="    //% block" line101="    //% group=&quot;Misc&quot;" line102="    export function showA0() {" line103="        basic.showNumber(pins.analogReadPin(AnalogPin.P0))" line104="    }" line105="" line106="}" numlines="107"></mutation><next><block type="typescript_statement" id="m_VBta=FY%6,kP9rq[2A" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class Color {" line1="" line2="    //% blockCombine" line3="    public red: number;" line4="    //% blockCombine" line5="    public green: number;" line6="    //% blockCombine" line7="    public blue: number;" line8="" line9="    constructor( red:number = 0, green:number = 0, blue:number = 0 ) {" line10="        this.red = 0;" line11="        this.green = 0;" line12="        this.blue = 0;" line13="    }" line14="" line15="    //% block=&quot;select color $c for $this&quot;" line16="    //% this.defl=color" line17="    //% c.shadow=&quot;colorNumberPicker&quot;" line18="    public selectColor( c:number ) {" line19="        this.red = (c &gt;&gt; 16) &amp; 0xFF;" line20="        this.green = (c &gt;&gt; 8) &amp; 0xFF;" line21="        this.blue = (c &gt;&gt; 0) &amp; 0xFF;" line22="    }" line23="" line24="    //% block=&quot;get color number from $this&quot;" line25="    //% this.defl=color" line26="    public getColorNumber() : number {" line27="        return ( this.red &lt;&lt; 16 ) | ( this.green &lt;&lt; 8 ) | ( this.blue );" line28="    }" line29="" line30="    //% block=&quot;show $this&quot;" line31="    //% this.defl=color" line32="    //% this.shadow=variables_get" line33="    public show() {" line34="        basic.showString(&quot;R&quot;)" line35="        basic.showNumber(this.red);" line36="        basic.showString(&quot;G&quot;)" line37="        basic.showNumber(this.green);" line38="        basic.showString(&quot;B&quot;)" line39="        basic.showNumber(this.blue);" line40="    }" line41="" line42="}" numlines="43"></mutation></block></next></block></statement></block></xml>