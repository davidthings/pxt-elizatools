<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="vcxl_}K!_!$O/hg^/G4P" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="`gnYsT}}(SCb9O1LFXpT" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace elizatools {" line1="" line2="    // Packing into number:  ( r &lt;&lt; 16 ) | (g &lt;&lt; 8 ) | b" line3="    // Sending to ws2812   ---b---g---r---&gt;" line4="" line5="    //% block=&quot;set ring led $cv&quot;" line6="    //% group=&quot;Ring&quot;" line7="    //% cv.shadow=&quot;colorNumberPicker&quot;" line8="    export function ringDirect(cv: number) {" line9="        let e = pins.createBuffer(25*3)" line10="" line11="        let rColor = (cv &gt;&gt; 16) &amp; 0xFF;" line12="        let gColor = (cv &gt;&gt;  8) &amp; 0xFF;" line13="        let bColor = (cv &gt;&gt;  0) &amp; 0xFF;" line14="" line15="        for (let j = 0; j &lt; 25; j++) {" line16="            e[j * 3 + 0] = gColor;" line17="            e[j * 3 + 1] = rColor;" line18="            e[j * 3 + 2] = bColor;" line19="        }" line20="        ws2812b.setBufferMode(DigitalPin.P8, ws2812b.BUFFER_MODE_RGB );" line21="        ws2812b.sendBuffer(e, DigitalPin.P8 );" line22="    }" line23="" line24="    //% block" line25="    //% group=&quot;Charger&quot;" line26="    export function checkCharger(): boolean {" line27="        let id = i2cReadRegister8( 0x6B, 0x48 )" line28="        // basic.showNumber( id )" line29="        return ( id == 0x19 )" line30="    }" line31="" line32="    //% block" line33="    //% group=&quot;IMU&quot;" line34="    export function checkIMU(): boolean {" line35="        let id2 = i2cReadRegister8( 0x68, 0x75 )" line36="        return (id2 == 0x4E)" line37="    }" line38="" line39="" line40="    //% block" line41="    //% group=&quot;ColorSensor&quot;" line42="    export function checkColorSensor(): boolean {" line43="        let id3 = i2cReadRegister8( 41, 178 )" line44="        // basic.showNumber( id )" line45="        return ( id3 == 68 )" line46="    }" line47="" line48="    let colorSensorConfigured : boolean = false;" line49="" line50="    //% block" line51="    //% group=&quot;ColorSensor&quot;" line52="    export function colorSensorRead(): number {" line53="        let rSense = 0;" line54="        let bSense = 0;" line55="        let gSense = 0;" line56="        colorSensorConfigure();" line57="        if (colorSensorConfigured) {" line58="            rSense = i2cReadRegister16(0x29, 0xA0 | 0x16);" line59="            gSense = i2cReadRegister16(0x29, 0xA0 | 0x18);" line60="            bSense = i2cReadRegister16(0x29, 0xA0 | 0x1A);" line61="        }" line62="        let rColor2 = ( rSense &gt;&gt; 8 ) &amp; 0xFF;" line63="        let gColor2 = ( gSense &gt;&gt; 8 ) &amp; 0xFF;" line64="        let bColor2 = ( bSense &gt;&gt; 8 ) &amp; 0xFF;" line65="" line66="        rColor2 = Math.pow( rColor2, 2.5 );" line67="        gColor2 = Math.pow( gColor2, 2.5 );" line68="        bColor2 = Math.pow( bColor2, 2.5 );" line69="" line70="        let cMax = (rColor2 &gt; gColor2) ? rColor2 : gColor2;" line71="        cMax = (bColor2 &gt; cMax) ? bColor2 : cMax;" line72="" line73="        rColor2 = 0x0F * rColor2 / cMax;" line74="        gColor2 = 0x0F * gColor2 / cMax;" line75="        bColor2 = 0x0F * bColor2 / cMax;" line76="" line77="        // basic.showNumber( rColor &gt;&gt; 4 );" line78="" line79="        return ( rColor2 &lt;&lt; 16 ) | (gColor2 &lt;&lt; 8 ) | bColor2;" line80="    }" line81="" line82="    function colorSensorConfigure() {" line83="        if ( !colorSensorConfigured &amp;&amp; checkColorSensor() ) {" line84="            // turn it on" line85="            // Control Reg:  PON AEN" line86="            i2cWriteRegister(0x29, (0x00 + 0x80), 3)" line87="            basic.pause(100)" line88="            // RGB TIMING:FF 2.4ms, C0 150ms, 16b" line89="            i2cWriteRegister(0x29, (0x01 + 0x80), 0xC0 )" line90="            // Wait Time:FF 2.4ms" line91="            i2cWriteRegister(0x29, (0x03 + 0x80), 0xFF )" line92="            // Persistance: 0x00 - IRQ every time" line93="            i2cWriteRegister(0x29, (0x0C + 0x80), 0)" line94="//            basic.showString( &quot;C&quot;);" line95="            colorSensorConfigured = true;" line96="        }" line97="    }" line98="" line99="    //% block=&quot;i2c read8 @ $address reg $register&quot;" line100="    //% group=&quot;I2C&quot;" line101="    export function i2cReadRegister8(address: number, register: number): number {" line102="        pins.i2cWriteNumber(" line103="            address," line104="            register," line105="            NumberFormat.UInt8LE," line106="            true" line107="        )" line108="        return pins.i2cReadNumber(address, NumberFormat.UInt8LE, false)" line109="    }" line110="" line111="    //% block=&quot;i2c read16 @ $address reg $register&quot;" line112="    //% group=&quot;I2C&quot;" line113="    export function i2cReadRegister16(address: number, register: number): number {" line114="        pins.i2cWriteNumber(" line115="            address," line116="            register," line117="            NumberFormat.UInt8LE," line118="            true" line119="        )" line120="        return pins.i2cReadNumber(address, NumberFormat.UInt16LE, false)" line121="    }" line122="" line123="    //% block=&quot;i2c write8 @$address reg $register v $value&quot;" line124="    //% group=&quot;I2C&quot;" line125="    export function i2cWriteRegister(address: number, register: number, value: number) {" line126="        pins.i2cWriteNumber(" line127="            address," line128="            register," line129="            NumberFormat.UInt8LE," line130="            true" line131="        )" line132="        pins.i2cWriteNumber(address, value, NumberFormat.UInt8LE, false)" line133="    }" line134="" line135="" line136="    //% block" line137="    //% group=&quot;Misc&quot;" line138="    export function showA0() {" line139="        basic.showNumber(pins.analogReadPin(AnalogPin.P0))" line140="    }" line141="" line142="}" numlines="143"></mutation></block></statement></block></xml>