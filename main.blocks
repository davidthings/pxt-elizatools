<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="wOD=F@J?)@1}??wNstws" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="m``{1X8n_=CV-R?0]LHQ" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace elizatools {" line1="" line2="    //% block=&quot;Set Tiny LED to $c&quot;" line3="    //% group=&quot;Tiny LED&quot;" line4="    //% c.defl=color" line5="    export function tinyLed( c:Color ) {" line6="        let b = pins.createBuffer(3)" line7="        b[ 0 ] = c.red;" line8="        b[ 1 ] = c.green;" line9="        b[ 2 ] = c.blue;" line10="        ws2812b.sendBuffer(b, DigitalPin.P8);" line11="    }" line12="" line13="    //% block=&quot;create color&quot;" line14="    //% group=&quot;Color&quot;" line15="    export function createColor(): Color {" line16="        return new Color( 0, 0, 0);" line17="    }" line18="" line19="    //% block=&quot;create specified color $cv&quot;" line20="    //% cv.shadow=&quot;colorNumberPicker&quot;" line21="    //% group=&quot;Color&quot;" line22="    export function createSpecifiedColor( cv:number ): Color {" line23="        let c = new Color( 0, 0, 0 );" line24="        c.selectColor( cv );" line25="        return c;" line26="    }" line27="" line28="    // //% block=&quot;select color $v for $color&quot;" line29="    // //% v.shadow=&quot;colorNumberPicker&quot;" line30="    // export function selectColor( c:Color, v:number) {" line31="    //     c.selectColor( v );" line32="    // }" line33="" line34="    //% block" line35="    //% group=&quot;ColorSensor&quot;" line36="    export function checkColorSensor(): boolean {" line37="        let id = i2cReadRegister8( 41, 178 )" line38="        // basic.showNumber( id )" line39="        return ( id == 68 )" line40="    }" line41="" line42="    let colorSensorConfigured : boolean = false;" line43="" line44="    //% block" line45="    //% group=&quot;ColorSensor&quot;" line46="    export function colorSensorRead( ) : Color {" line47="        let d = new Color();" line48="        colorSensorConfigure();" line49="        if (colorSensorConfigured) {" line50="            d.red = i2cReadRegister16(41, 184) &gt;&gt; 8;" line51="            d.green = i2cReadRegister16(41, 186) &gt;&gt; 8;" line52="            d.blue = i2cReadRegister16(41, 188) &gt;&gt; 8;" line53="        }" line54="        return d;" line55="    }" line56="" line57="    function colorSensorConfigure() {" line58="        if ( !colorSensorConfigured &amp;&amp; checkColorSensor() ) {" line59="            // turn it on" line60="            i2cWriteRegister(41, (0 + 0x80), 3)" line61="            basic.pause(100)" line62="            //" line63="            i2cWriteRegister(41, (1 + 0x80), 255)" line64="            i2cWriteRegister(41, (3 + 0x80), 255)" line65="            i2cWriteRegister(41, (13 + 0x80), 0)" line66="            basic.showString( &quot;C&quot;);" line67="            colorSensorConfigured = true;" line68="        }" line69="    }" line70="" line71="    //% block=&quot;i2c read8 @ $address reg $register&quot;" line72="    //% group=&quot;I2C&quot;" line73="    export function i2cReadRegister8(address: number, register: number): number {" line74="        pins.i2cWriteNumber(" line75="            address," line76="            register," line77="            NumberFormat.UInt8LE," line78="            true" line79="        )" line80="        return pins.i2cReadNumber(address, NumberFormat.UInt8LE, false)" line81="    }" line82="" line83="    //% block=&quot;i2c read16 @ $address reg $register&quot;" line84="    //% group=&quot;I2C&quot;" line85="    export function i2cReadRegister16(address: number, register: number): number {" line86="        pins.i2cWriteNumber(" line87="            address," line88="            register," line89="            NumberFormat.UInt8LE," line90="            true" line91="        )" line92="        return pins.i2cReadNumber(address, NumberFormat.UInt16LE, false)" line93="    }" line94="" line95="    //% block=&quot;i2c write8 @$address reg $register v $value&quot;" line96="    //% group=&quot;I2C&quot;" line97="    export function i2cWriteRegister(address: number, register: number, value: number) {" line98="        pins.i2cWriteNumber(" line99="            address," line100="            register," line101="            NumberFormat.UInt8LE," line102="            true" line103="        )" line104="        pins.i2cWriteNumber(address, value, NumberFormat.UInt8LE, false)" line105="    }" line106="" line107="" line108="    //% block" line109="    //% group=&quot;Misc&quot;" line110="    export function showA0() {" line111="        basic.showNumber(pins.analogReadPin(AnalogPin.P0))" line112="    }" line113="" line114="}" numlines="115"></mutation><next><block type="typescript_statement" id="5U?HeeEC}yU1A*%7d6vN" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class Color {" line1="" line2="    //% blockCombine" line3="    public red: number;" line4="    //% blockCombine" line5="    public green: number;" line6="    //% blockCombine" line7="    public blue: number;" line8="" line9="    constructor( red:number = 0, green:number = 0, blue:number = 0 ) {" line10="        this.red = 0;" line11="        this.green = 0;" line12="        this.blue = 0;" line13="    }" line14="" line15="" line16="    //% block=&quot;select color $c for $this&quot;" line17="    //% this.defl=color" line18="    //% c.shadow=&quot;colorNumberPicker&quot;" line19="    public selectColor( c:number ) {" line20="        this.red = (c &gt;&gt; 16) &amp; 0xFF;" line21="        this.green = (c &gt;&gt; 8) &amp; 0xFF;" line22="        this.blue = (c &gt;&gt; 0) &amp; 0xFF;" line23="    }" line24="" line25="    //% block=&quot;get color number from $this&quot;" line26="    //% this.defl=color" line27="    public getColorNumber() : number {" line28="        return ( this.red &lt;&lt; 16 ) | ( this.green &lt;&lt; 8 ) | ( this.blue );" line29="    }" line30="" line31="    //% block=&quot;show $this&quot;" line32="    //% this.defl=color" line33="    //% this.shadow=variables_get" line34="    public show() {" line35="        basic.showString(&quot;R&quot;)" line36="        basic.showNumber(this.red);" line37="        basic.showString(&quot;G&quot;)" line38="        basic.showNumber(this.green);" line39="        basic.showString(&quot;B&quot;)" line40="        basic.showNumber(this.blue);" line41="    }" line42="" line43="}" numlines="44"></mutation></block></next></block></statement></block></xml>