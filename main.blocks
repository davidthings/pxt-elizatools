<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="*NJ|(0.#O46%OE0#3|BX" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="qqz6~6jGr8U!~;,T$z.9" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace elizatools {" line1="" line2="    //% block=&quot;create color&quot;" line3="    //% blockSetVariable=color" line4="    export function createColor(): Color {" line5="        return new Color();" line6="    }" line7="" line8="    //% block" line9="    export function showA0() {" line10="        basic.showNumber(pins.analogReadPin(AnalogPin.P0))" line11="    }" line12="" line13="    //% block" line14="    export function ColorSensorId(): number {" line15="        pins.i2cWriteNumber(" line16="            41," line17="            178," line18="            NumberFormat.UInt8LE," line19="            true" line20="        )" line21="        return pins.i2cReadNumber(41, NumberFormat.UInt8LE, false)" line22="    }" line23="" line24="    //% block=&quot;i2c read8 @ $address reg $register&quot;" line25="    export function i2cReadRegister8(address: number, register: number): number {" line26="        pins.i2cWriteNumber(" line27="            address," line28="            register," line29="            NumberFormat.UInt8LE," line30="            true" line31="        )" line32="        return pins.i2cReadNumber(address, NumberFormat.UInt8LE, false)" line33="    }" line34="" line35="    //% block=&quot;i2c read16 @ $address reg $register&quot;" line36="    export function i2cReadRegister16(address: number, register: number): number {" line37="        pins.i2cWriteNumber(" line38="            address," line39="            register," line40="            NumberFormat.UInt8LE," line41="            true" line42="        )" line43="        return pins.i2cReadNumber(address, NumberFormat.UInt16LE, false)" line44="    }" line45="" line46="    //% block=&quot;i2c write8 @$address reg $register v $value&quot;" line47="    export function i2cWriteRegister(address: number, register: number, value: number) {" line48="        pins.i2cWriteNumber(" line49="            address," line50="            register," line51="            NumberFormat.UInt8LE," line52="            true" line53="        )" line54="        pins.i2cWriteNumber(address, value, NumberFormat.UInt8LE, false)" line55="    }" line56="}" numlines="57"></mutation><next><block type="typescript_statement" id="!V8LtItZyi*Z3L])K:22" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class Color {" line1="" line2="    //% blockCombine" line3="    public red: number;" line4="    //% blockCombine" line5="    public green: number;" line6="    //% blockCombine" line7="    public blue: number;" line8="" line9="    constructor( red:number = 0, green:number = 0, blue:number = 0 ) {" line10="        this.red = 0;" line11="        this.green = 0;" line12="        this.blue = 0;" line13="    }" line14="" line15="    " line16="" line17="    //% block=&quot;show $this&quot;" line18="    //% this.defl=color" line19="    //% this.shadow=variables_get" line20="    public show() {" line21="        basic.showString(&quot;R&quot;)" line22="        basic.showNumber(this.red);" line23="        basic.showString(&quot;G&quot;)" line24="        basic.showNumber(this.green);" line25="        basic.showString(&quot;B&quot;)" line26="        basic.showNumber(this.blue);" line27="    }" line28="" line29="}" numlines="30"></mutation></block></next></block></statement></block></xml>