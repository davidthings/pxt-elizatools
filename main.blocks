<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="8ez8zzx?HSN!,9rNwWQ;" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="dr@lOo;]%s0n4fGHYH#T" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace elizatools {" line1="" line2="    // Packing into number:  ( r &lt;&lt; 16 ) | (g &lt;&lt; 8 ) | b" line3="    // Sending to ws2812   ---b---g---r---&gt;" line4="" line5="    //% block=&quot;set ring led $cv&quot;" line6="    //% group=&quot;Ring&quot;" line7="    //% cv.shadow=&quot;colorNumberPicker&quot;" line8="    export function ringDirect(cv: number) {" line9="        let e = pins.createBuffer(25*3)" line10="" line11="        let rColor = (cv &gt;&gt; 16) &amp; 0xFF;" line12="        let gColor = (cv &gt;&gt;  8) &amp; 0xFF;" line13="        let bColor = (cv &gt;&gt;  0) &amp; 0xFF;" line14="" line15="        for (let j = 0; j &lt; 25; j++) {" line16="            e[j * 3 + 0] = gColor;" line17="            e[j * 3 + 1] = rColor;" line18="            e[j * 3 + 2] = bColor;" line19="        }" line20="        // ws2812b.setBufferMode(DigitalPin.P8, ws2812b.BUFFER_MODE_RGB );" line21="        //ws2812b.sendBuffer(e, DigitalPin.P8 );" line22="    }" line23="" line24="    //% block=&quot;set head leds $cv&quot;" line25="    //% group=&quot;Ring&quot;" line26="    //% cv.shadow=&quot;colorNumberPicker&quot;" line27="    export function headDirect(cv: number) {" line28="        let f = pins.createBuffer(3 * 3)" line29="" line30="        let rColor2 = (cv &gt;&gt; 16) &amp; 0xFF;" line31="        let gColor2 = (cv &gt;&gt; 8) &amp; 0xFF;" line32="        let bColor2 = (cv &gt;&gt; 0) &amp; 0xFF;" line33="" line34="        for (let k = 0; k &lt; 25; k++) {" line35="            f[k * 3 + 0] = gColor2;" line36="            f[k * 3 + 1] = rColor2;" line37="            f[k * 3 + 2] = bColor2;" line38="        }" line39="" line40="        // ws2812b.setBufferMode(DigitalPin.P16, 1)" line41="        // ws2812b.sendBuffer(f, DigitalPin.P16)" line42="" line43="        // ws2812b.setBufferMode(DigitalPin.P16, ws2812b.BUFFER_MODE_RGB);" line44="        // ws2812b.sendBuffer(f, DigitalPin.P16);" line45="    }" line46="" line47="    //% block" line48="    //% group=&quot;Charger&quot;" line49="    export function checkCharger(): boolean {" line50="        let id = i2cReadRegister8( 0x6B, 0x48 )" line51="        // basic.showNumber( id )" line52="        return ( id == 0x19 )" line53="    }" line54="" line55="    //% block" line56="    //% group=&quot;IMU&quot;" line57="    export function checkIMU(): boolean {" line58="        let id2 = i2cReadRegister8( 0x68, 0x75 )" line59="        return (id2 == 0x4E)" line60="    }" line61="" line62="    //% block" line63="    //% group=&quot;Distance&quot;" line64="    export function distance(): number {" line65="        let trig = DigitalPin.P1;" line66="        let echo = DigitalPin.P2;" line67="        let maxCMDistance = 100 * 58;" line68="        " line69="        pins.setPull(trig, PinPullMode.PullNone);" line70="        pins.digitalWritePin(trig, 0);" line71="        control.waitMicros(2);" line72="        pins.digitalWritePin(trig, 1);" line73="        control.waitMicros(10);" line74="        pins.digitalWritePin(trig, 0);" line75="" line76="        // read pulse" line77="        const d = pins.pulseIn(echo, PulseValue.High, maxCMDistance ); " line78="" line79="        return Math.idiv( d, 58 );" line80="    }" line81="" line82="    // " line83="" line84="    let colorSensorConfigured: boolean = false;" line85="    let colorSensorAddress: number = 0x39;" line86="    let colorSensorEnableRegister : number = 0x80;" line87="    let colorSensorATimeRegister  : number = 0x81;" line88="    let colorSensorWTimeRegister  : number = 0x83;" line89="    let colorSensorPersRegister   : number = 0x8C;" line90="    let colorSensorAGainRegister  : number = 0x8F;" line91="    let colorSensorIdRegister     : number = 0x92;" line92="    let colorSensorStatusRegister : number = 0x93;" line93="    let colorSensorRedRegister    : number = 0x96;" line94="    let colorSensorGreenRegister  : number = 0x98;" line95="    let colorSensorBlueRegister   : number = 0x9A;" line96="" line97="    let colorSensorId:number = 0x90;" line98="" line99="    //% block" line100="    //% group=&quot;ColorSensor&quot;" line101="    export function checkColorSensor(): boolean {" line102="        let id3 = i2cReadRegister8(colorSensorAddress, colorSensorIdRegister );" line103="        // basic.showNumber( id )" line104="        return (id3 == colorSensorId )" line105="    }" line106="" line107="    //% block" line108="    //% group=&quot;ColorSensor&quot;" line109="    export function colorSensorReadId(): number {" line110="        let id32 = i2cReadRegister8(colorSensorAddress, colorSensorIdRegister);" line111="        // basic.showNumber( id )" line112="        return id32;" line113="    }" line114="" line115="    //% block" line116="    //% group=&quot;ColorSensor&quot;" line117="    export function colorSensorReadStatus(): number {" line118="        let status = i2cReadRegister8(colorSensorAddress, colorSensorStatusRegister );" line119="        // basic.showNumber( id )" line120="        return status;" line121="    }" line122="" line123="    //% block" line124="    //% group=&quot;ColorSensor&quot;" line125="    export function colorSensorReadEnable(): number {" line126="        let status2 = i2cReadRegister8(colorSensorAddress, colorSensorEnableRegister);" line127="        // basic.showNumber( id )" line128="        return status2;" line129="    }" line130="" line131="    //% block" line132="    //% group=&quot;ColorSensor&quot;" line133="    export function colorSensorRead(): number {" line134="        let rSense:number = 0;" line135="        let bSense:number = 0;" line136="        let gSense:number = 0;" line137="" line138="        colorSensorConfigure();" line139="        " line140="        if (colorSensorConfigured) {" line141="            rSense = i2cReadRegister16(colorSensorAddress, colorSensorRedRegister );" line142="            gSense = i2cReadRegister16(colorSensorAddress, colorSensorGreenRegister );" line143="            bSense = i2cReadRegister16(colorSensorAddress, colorSensorBlueRegister);" line144="        }" line145="" line146="" line147="        let rColor22 = ( rSense &gt;&gt; 8 ) &amp; 0xFF;" line148="        let gColor22 = ( gSense &gt;&gt; 8 ) &amp; 0xFF;" line149="        let bColor22 = ( bSense &gt;&gt; 8 ) &amp; 0xFF;" line150="" line151="        rColor22 = Math.pow( rColor22, 2.5 );" line152="        gColor22 = Math.pow( gColor22, 2.5 );" line153="        bColor22 = Math.pow( bColor22, 2.5 );" line154="" line155="        let cMax = (rColor22 &gt; gColor22) ? rColor22 : gColor22;" line156="        cMax = (bColor22 &gt; cMax) ? bColor22 : cMax;" line157="" line158="        rColor22 = 64 * rColor22 / cMax;" line159="        gColor22 = 64 * gColor22 / cMax;" line160="        bColor22 = 64 * bColor22 / cMax;" line161="" line162="        // basic.showNumber( rColor &gt;&gt; 4 );" line163="" line164="        return (rColor22 &lt;&lt; 16) | (gColor22 &lt;&lt; 8) | bColor22;" line165="        // return (rSense &lt;&lt; 16) | (gSense &lt;&lt; 8) | bSense;" line166="" line167="" line168="   // return rSense + gSense + bSense;" line169="" line170="    }" line171="" line172="    //% block" line173="    //% group=&quot;ColorSensor&quot;" line174="    export function colorGetRed( color:number ): number {" line175="        return ( color &gt;&gt; 16 ) &amp; 0xFF;" line176="    }" line177="" line178="    //% block" line179="    //% group=&quot;ColorSensor&quot;" line180="    export function colorGetGreen(color: number): number {" line181="        return ( color &gt;&gt; 8 ) &amp; 0xFF;" line182="    }" line183="" line184="    //% block" line185="    //% group=&quot;ColorSensor&quot;" line186="    export function colorGetBlue(color: number): number {" line187="        return ( color &amp; 0xFF );" line188="    }" line189="" line190="" line191="    function colorSensorConfigure() {" line192="        if ( !colorSensorConfigured &amp;&amp; checkColorSensor() ) {" line193="            // turn it on" line194="            // Control Reg:  PON" line195="            i2cWriteRegister(colorSensorAddress, colorSensorEnableRegister, 0x01 )" line196="" line197="            basic.pause(100)" line198="" line199="            // ATime  :RGB TIMING:FF 2.4ms, C0 150ms" line200="            i2cWriteRegister(colorSensorAddress, colorSensorATimeRegister, 0xC0 )" line201="            // Wait Time:FF 2.4ms" line202="            i2cWriteRegister(colorSensorAddress, colorSensorWTimeRegister, 0xFF )" line203="            // Persistance: 0x00 - IRQ every time" line204="            i2cWriteRegister(colorSensorAddress, colorSensorPersRegister, 0 )" line205="            // AGain: 0 - 3" line206="            i2cWriteRegister(colorSensorAddress, colorSensorAGainRegister, 3 )" line207="" line208="            // Control Reg:  PON AEN" line209="            i2cWriteRegister(colorSensorAddress, colorSensorEnableRegister, 0x08 | 0x03)" line210="            basic.pause(100)" line211="" line212="" line213="//            basic.showString( &quot;C&quot;);" line214="            colorSensorConfigured = true;" line215="        }" line216="    }" line217="" line218="    //% block=&quot;i2c read8 @ $address reg $register&quot;" line219="    //% group=&quot;I2C&quot;" line220="    export function i2cReadRegister8(address: number, register: number): number {" line221="        pins.i2cWriteNumber(" line222="            address," line223="            register," line224="            NumberFormat.UInt8LE," line225="            true" line226="        )" line227="        return pins.i2cReadNumber(address, NumberFormat.UInt8LE, false)" line228="    }" line229="" line230="    //% block=&quot;i2c read16 @ $address reg $register&quot;" line231="    //% group=&quot;I2C&quot;" line232="    export function i2cReadRegister16(address: number, register: number): number {" line233="        pins.i2cWriteNumber(" line234="            address," line235="            register," line236="            NumberFormat.UInt8LE," line237="            true" line238="        )" line239="        return pins.i2cReadNumber(address, NumberFormat.UInt16LE, false)" line240="    }" line241="" line242="    //% block=&quot;i2c write8 @$address reg $register v $value&quot;" line243="    //% group=&quot;I2C&quot;" line244="    export function i2cWriteRegister8_8(address: number, register: number, value: number) {" line245="        pins.i2cWriteNumber(" line246="            address," line247="            register," line248="            NumberFormat.UInt8LE," line249="            true" line250="        )" line251="        pins.i2cWriteNumber(address, value, NumberFormat.UInt8LE, false)" line252="    }" line253="" line254="    //% block=&quot;i2c write8 @$address reg $register v $value&quot;" line255="    //% group=&quot;I2C&quot;" line256="    export function i2cWriteRegister(address: number, register: number, value: number) {" line257="        pins.i2cWriteNumber(" line258="            address," line259="            register | ( value &lt;&lt; 8 )," line260="            NumberFormat.UInt16LE," line261="            false" line262="        )" line263="        // pins.i2cWriteNumber(address, value, NumberFormat.UInt8LE, false)" line264="    }" line265="" line266="    //% block" line267="    //% group=&quot;Misc&quot;" line268="    // export function showA0() {" line269="    //    basic.showNumber(pins.analogReadPin(AnalogPin.P0))" line270="    // }" line271="" line272="}" numlines="273"></mutation></block></statement></block></xml>